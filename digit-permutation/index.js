/*
Дан массив целых неотрицательных чисел, нужно сгруппировать друг с другом числа,
которые можно получить путём перестановки цифр их составляющих,
нули при этом игнорируем, т. к. нет числа 011.
Решение должно быть максимально эффективно по памяти и времени.

Кейсы:

- [1230, 99, 23001, 123, 111, 300021, 101010, 90000009, 9] =>
   [[99, 90000009], [111, 101010], [1230, 23001, 123, 300021], [9]]

1230 - "{1: 1, 2: 1, 3: 1}" => 123 => 1_1,2_1,3_1 => (1 - 1, 2 - 13, 1 - ?)
99 - {9: 2} => 99 => 9_2
23001 - {1: 1, 2: 1, 3: 1} => 123 => 1_1,2_1,3_1
123 - {1: 1, 2: 1, 3: 1} => 123 => 1_1,2_1,3_1
300021 - {1: 1, 2: 1, 3: 1} => 123 => 1_1,2_1,3_1
101010 - {1: 3} => 1_3
90000009 - {9: 2} => 9_2
9 - {9: 1} => 91

*JSON.stringify - property ordering - is not guraneeted in any specification!

1_14_5_23_8_12_9_5

Подход:

(1)
- проходимся по всем числам

- и "конвертируем" это число в какой то уникальный идентификатор для групировки:

- считаем все цифры в числе и сортируем по возрастанию вместе с количеством

- сериализируем объект с вычислением количества в уникальную строку идентифицируемую

- сохраняем в объект группировки Record<this_unique_string, [...]>

- в конце делаем Object.values от группировки!


n - количество чисел в массиве
m - длина числа

Время: O(n * m)
Память: O(n * O(9)) => O(n)


все равно лучше чем
O(n * m log m)

*/

function digitPermutation(arr) {
  const group = {}; // Record<group_key, {}>

  for (const num of arr) {
    const digitCount = {};
    for (const c of num.toString()) {
      // сохраняем цифры от 1 до 9 в объект счетчика
      if (c !== "0") {
        digitCount[c] = (digitCount[c] ?? 0) + 1;
      }
    }

    let digitCountStr = "";
    for (let digit = 1; digit <= 9; digit += 1) {
      // сериализируем цифру и количество ее в строковый вид
      if (digit in digitCount) {
        digitCountStr += `${digit}_${digitCount[digit]}_`;
      }
    }
    if (digitCountStr) {
      group[digitCountStr] ??= [];
      group[digitCountStr].push(num);
    }
  }

  return Object.values(group);
}

console.clear();
console.log("start test");
console.log(
  digitPermutation([
    1230, 99, 23001, 123, 111, 300021, 101010, 90000009, 9,
  ])
);
// [[99, 90000009], [111, 101010], [1230, 23001, 123, 300021], [9]]

console.log(digitPermutation([11, 22])); // [[11], [22]]

console.log(digitPermutation([11111111112, 122222222222])); // [[11111111112], [122222222222]]

console.log("end test");
